// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.12.4
// source: Proto/message.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MessageServiceClient is the client API for MessageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MessageServiceClient interface {
	// Funciones Vanguardia - Broker
	GetPlanet(ctx context.Context, in *SolicitudPlaneta, opts ...grpc.CallOption) (*PlanetaDesignado, error)
	// Funciones Vanguardia-Planeta
	AgregarBase(ctx context.Context, in *Crear, opts ...grpc.CallOption) (*CodigoRespuesta, error)
	RenombrarBase(ctx context.Context, in *CambioNombre, opts ...grpc.CallOption) (*CodigoRespuesta, error)
	ActualizarValor(ctx context.Context, in *Actualizar, opts ...grpc.CallOption) (*CodigoRespuesta, error)
	BorrarBase(ctx context.Context, in *Borrar, opts ...grpc.CallOption) (*CodigoRespuesta, error)
	// Funciones Guardianes-Broker
	GetSoldados(ctx context.Context, in *SoldadosRequest, opts ...grpc.CallOption) (*SoldadosAnswer, error)
	// Funciones Broker - Planeta
	SoldadosQuery(ctx context.Context, in *SoldadosRequest, opts ...grpc.CallOption) (*SoldadosAnswer, error)
	// Funciones Planeta coordinador - Planetas esclavos
	MergeRequest(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*MergeAnswerString, error)
	Consistencia(ctx context.Context, in *Consistency, opts ...grpc.CallOption) (*Ack, error)
}

type messageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMessageServiceClient(cc grpc.ClientConnInterface) MessageServiceClient {
	return &messageServiceClient{cc}
}

func (c *messageServiceClient) GetPlanet(ctx context.Context, in *SolicitudPlaneta, opts ...grpc.CallOption) (*PlanetaDesignado, error) {
	out := new(PlanetaDesignado)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/GetPlanet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) AgregarBase(ctx context.Context, in *Crear, opts ...grpc.CallOption) (*CodigoRespuesta, error) {
	out := new(CodigoRespuesta)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/AgregarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) RenombrarBase(ctx context.Context, in *CambioNombre, opts ...grpc.CallOption) (*CodigoRespuesta, error) {
	out := new(CodigoRespuesta)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/RenombrarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) ActualizarValor(ctx context.Context, in *Actualizar, opts ...grpc.CallOption) (*CodigoRespuesta, error) {
	out := new(CodigoRespuesta)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/ActualizarValor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) BorrarBase(ctx context.Context, in *Borrar, opts ...grpc.CallOption) (*CodigoRespuesta, error) {
	out := new(CodigoRespuesta)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/BorrarBase", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) GetSoldados(ctx context.Context, in *SoldadosRequest, opts ...grpc.CallOption) (*SoldadosAnswer, error) {
	out := new(SoldadosAnswer)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/GetSoldados", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) SoldadosQuery(ctx context.Context, in *SoldadosRequest, opts ...grpc.CallOption) (*SoldadosAnswer, error) {
	out := new(SoldadosAnswer)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/SoldadosQuery", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) MergeRequest(ctx context.Context, in *Signal, opts ...grpc.CallOption) (*MergeAnswerString, error) {
	out := new(MergeAnswerString)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/MergeRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *messageServiceClient) Consistencia(ctx context.Context, in *Consistency, opts ...grpc.CallOption) (*Ack, error) {
	out := new(Ack)
	err := c.cc.Invoke(ctx, "/grpc.MessageService/Consistencia", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MessageServiceServer is the server API for MessageService service.
// All implementations must embed UnimplementedMessageServiceServer
// for forward compatibility
type MessageServiceServer interface {
	// Funciones Vanguardia - Broker
	GetPlanet(context.Context, *SolicitudPlaneta) (*PlanetaDesignado, error)
	// Funciones Vanguardia-Planeta
	AgregarBase(context.Context, *Crear) (*CodigoRespuesta, error)
	RenombrarBase(context.Context, *CambioNombre) (*CodigoRespuesta, error)
	ActualizarValor(context.Context, *Actualizar) (*CodigoRespuesta, error)
	BorrarBase(context.Context, *Borrar) (*CodigoRespuesta, error)
	// Funciones Guardianes-Broker
	GetSoldados(context.Context, *SoldadosRequest) (*SoldadosAnswer, error)
	// Funciones Broker - Planeta
	SoldadosQuery(context.Context, *SoldadosRequest) (*SoldadosAnswer, error)
	// Funciones Planeta coordinador - Planetas esclavos
	MergeRequest(context.Context, *Signal) (*MergeAnswerString, error)
	Consistencia(context.Context, *Consistency) (*Ack, error)
	mustEmbedUnimplementedMessageServiceServer()
}

// UnimplementedMessageServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMessageServiceServer struct {
}

func (UnimplementedMessageServiceServer) GetPlanet(context.Context, *SolicitudPlaneta) (*PlanetaDesignado, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPlanet not implemented")
}
func (UnimplementedMessageServiceServer) AgregarBase(context.Context, *Crear) (*CodigoRespuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AgregarBase not implemented")
}
func (UnimplementedMessageServiceServer) RenombrarBase(context.Context, *CambioNombre) (*CodigoRespuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenombrarBase not implemented")
}
func (UnimplementedMessageServiceServer) ActualizarValor(context.Context, *Actualizar) (*CodigoRespuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ActualizarValor not implemented")
}
func (UnimplementedMessageServiceServer) BorrarBase(context.Context, *Borrar) (*CodigoRespuesta, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BorrarBase not implemented")
}
func (UnimplementedMessageServiceServer) GetSoldados(context.Context, *SoldadosRequest) (*SoldadosAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSoldados not implemented")
}
func (UnimplementedMessageServiceServer) SoldadosQuery(context.Context, *SoldadosRequest) (*SoldadosAnswer, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SoldadosQuery not implemented")
}
func (UnimplementedMessageServiceServer) MergeRequest(context.Context, *Signal) (*MergeAnswerString, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MergeRequest not implemented")
}
func (UnimplementedMessageServiceServer) Consistencia(context.Context, *Consistency) (*Ack, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Consistencia not implemented")
}
func (UnimplementedMessageServiceServer) mustEmbedUnimplementedMessageServiceServer() {}

// UnsafeMessageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MessageServiceServer will
// result in compilation errors.
type UnsafeMessageServiceServer interface {
	mustEmbedUnimplementedMessageServiceServer()
}

func RegisterMessageServiceServer(s grpc.ServiceRegistrar, srv MessageServiceServer) {
	s.RegisterService(&MessageService_ServiceDesc, srv)
}

func _MessageService_GetPlanet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SolicitudPlaneta)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetPlanet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/GetPlanet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetPlanet(ctx, req.(*SolicitudPlaneta))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_AgregarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Crear)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).AgregarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/AgregarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).AgregarBase(ctx, req.(*Crear))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_RenombrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CambioNombre)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).RenombrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/RenombrarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).RenombrarBase(ctx, req.(*CambioNombre))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_ActualizarValor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Actualizar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).ActualizarValor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/ActualizarValor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).ActualizarValor(ctx, req.(*Actualizar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_BorrarBase_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Borrar)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).BorrarBase(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/BorrarBase",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).BorrarBase(ctx, req.(*Borrar))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_GetSoldados_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoldadosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).GetSoldados(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/GetSoldados",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).GetSoldados(ctx, req.(*SoldadosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_SoldadosQuery_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SoldadosRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).SoldadosQuery(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/SoldadosQuery",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).SoldadosQuery(ctx, req.(*SoldadosRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_MergeRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Signal)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).MergeRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/MergeRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).MergeRequest(ctx, req.(*Signal))
	}
	return interceptor(ctx, in, info, handler)
}

func _MessageService_Consistencia_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Consistency)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MessageServiceServer).Consistencia(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.MessageService/Consistencia",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MessageServiceServer).Consistencia(ctx, req.(*Consistency))
	}
	return interceptor(ctx, in, info, handler)
}

// MessageService_ServiceDesc is the grpc.ServiceDesc for MessageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MessageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.MessageService",
	HandlerType: (*MessageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetPlanet",
			Handler:    _MessageService_GetPlanet_Handler,
		},
		{
			MethodName: "AgregarBase",
			Handler:    _MessageService_AgregarBase_Handler,
		},
		{
			MethodName: "RenombrarBase",
			Handler:    _MessageService_RenombrarBase_Handler,
		},
		{
			MethodName: "ActualizarValor",
			Handler:    _MessageService_ActualizarValor_Handler,
		},
		{
			MethodName: "BorrarBase",
			Handler:    _MessageService_BorrarBase_Handler,
		},
		{
			MethodName: "GetSoldados",
			Handler:    _MessageService_GetSoldados_Handler,
		},
		{
			MethodName: "SoldadosQuery",
			Handler:    _MessageService_SoldadosQuery_Handler,
		},
		{
			MethodName: "MergeRequest",
			Handler:    _MessageService_MergeRequest_Handler,
		},
		{
			MethodName: "Consistencia",
			Handler:    _MessageService_Consistencia_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "Proto/message.proto",
}
